<!DOCTYPE html>
<html>
  <head>
    <title>NRJHub</title>
    <%= renderTemplate("_header.html.template") %>
    <link rel="mask-icon" href="/static/icons/mask-icon.svg" color="#18bcf2" />
    <link
      rel="apple-touch-icon"
      href="/static/icons/favicon-apple-180x180.png"
    />
    <meta name="apple-itunes-app" content="app-id=1099568401" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="NRJHub">
    <meta name="msapplication-config" content="/static/icons/browserconfig.xml" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="application-name" content="NRJHub">
    <meta name="referrer" content="same-origin" />
    <meta name="theme-color" content="{{ theme_color }}" />
    <meta name="color-scheme" content="dark light" />
    <%= renderTemplate("_style_base.html.template") %>
    <style>
      html {
        background-color: var(--primary-background-color, #fafafa);
        color: var(--primary-text-color, #212121);
        height: 100vh;
      }
      @media (prefers-color-scheme: dark) {
        html {
          background-color: var(--primary-background-color, #111111);
          color: var(--primary-text-color, #e1e1e1);
        }
      }
      #ha-launch-screen {
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }
      #ha-launch-screen svg {
        width: 112px;
        flex-shrink: 0;
      }
      #ha-launch-screen .ha-launch-screen-spacer-top {
        flex: 1;
        margin-top: calc( 2 * max(env(safe-area-inset-bottom), 48px) + 46px );
        padding-top: 48px;
      }
      #ha-launch-screen .ha-launch-screen-spacer-bottom {
        flex: 1;
        padding-top: 48px;
      }
      .ohf-logo {
        margin: max(env(safe-area-inset-bottom), 48px) 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        opacity: .66;
      }
      @media (prefers-color-scheme: dark) {
        .ohf-logo {
          filter: invert(1);
        }
      }
    </style>
  </head>
  <body>
    <div id="ha-launch-screen">
      <div class="ha-launch-screen-spacer-top"></div>
      <svg version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd;width: 120px;height: 120px;" xmlns:xlink="http://www.w3.org/1999/xlink" width="500px" height="500px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500">
    <g><path style="opacity:0.998" fill="#fdfdfd" d="M 5.5,-0.5 C 168.167,-0.5 330.833,-0.5 493.5,-0.5C 493.5,166.167 493.5,332.833 493.5,499.5C 330.833,499.5 168.167,499.5 5.5,499.5C 5.5,332.833 5.5,166.167 5.5,-0.5 Z"/></g>
    <g><path style="opacity:1" fill="#48bdcf" d="M 432.5,210.5 C 412.674,211.497 392.674,211.83 372.5,211.5C 372.5,244.5 372.5,277.5 372.5,310.5C 365.167,310.5 357.833,310.5 350.5,310.5C 350.667,271.165 350.5,231.832 350,192.5C 312.08,171.875 274.08,151.542 236,131.5C 216.425,141.414 197.092,151.747 178,162.5C 177.833,138.493 177.333,114.493 176.5,90.5C 166.578,81.3639 165.078,71.0306 172,59.5C 180.844,50.3317 190.677,49.165 201.5,56C 210.448,64.5462 211.948,74.3795 206,85.5C 204.333,87.1667 202.667,88.8333 201,90.5C 200.333,101.833 200.333,113.167 201,124.5C 211.785,118.525 222.619,112.692 233.5,107C 234.833,106.333 236.167,106.333 237.5,107C 302.495,141.498 367.495,175.998 432.5,210.5 Z"/></g>
    <g><path style="opacity:1" fill="#fafcfd" d="M 184.5,63.5 C 194.543,62.3784 199.043,66.7118 198,76.5C 195.185,82.1691 190.685,84.0024 184.5,82C 182.333,81.1667 180.833,79.6667 180,77.5C 178.309,71.6102 179.809,66.9436 184.5,63.5 Z"/></g>
    <g><path style="opacity:1" fill="#414241" d="M 121.5,192.5 C 120.501,252.331 120.168,312.331 120.5,372.5C 146.005,372.831 171.339,372.498 196.5,371.5C 202.469,363.365 210.469,360.531 220.5,363C 235.762,369.705 239.595,380.538 232,395.5C 220.762,407.03 209.262,407.363 197.5,396.5C 197.672,395.508 197.338,394.842 196.5,394.5C 164.338,393.502 132.004,393.168 99.5,393.5C 99.8324,332.664 99.4991,271.998 98.5,211.5C 78.6596,211.83 58.9929,211.497 39.5,210.5C 69.7021,194.232 100.035,178.232 130.5,162.5C 131.83,156.034 132.497,149.201 132.5,142C 132.5,134.992 132.166,128.158 131.5,121.5C 121.559,113.178 119.392,103.178 125,91.5C 134.749,80.8257 145.582,79.659 157.5,88C 166.409,100.163 165.243,111.33 154,121.5C 153.833,139.509 153.333,157.509 152.5,175.5C 141.976,180.926 131.643,186.593 121.5,192.5 Z"/></g>
    <g><path style="opacity:1" fill="#f5f5f5" d="M 138.5,93.5 C 151.916,93.3941 155.582,99.2275 149.5,111C 138.32,115.499 132.82,111.666 133,99.5C 134.36,96.9774 136.193,94.9774 138.5,93.5 Z"/></g>
    <g><path style="opacity:1" fill="#696969" d="M 131.5,121.5 C 132.166,128.158 132.5,134.992 132.5,142C 132.497,149.201 131.83,156.034 130.5,162.5C 131.481,148.912 131.815,135.246 131.5,121.5 Z"/></g>
    <g><path style="opacity:1" fill="#cdcecd" d="M 39.5,210.5 C 58.9929,211.497 78.6596,211.83 98.5,211.5C 98.5,211.833 98.5,212.167 98.5,212.5C 78.4889,212.833 58.4889,212.5 38.5,211.5C 38.6236,210.893 38.9569,210.56 39.5,210.5 Z"/></g>
    <g><path style="opacity:1" fill="#50c0d1" d="M 189.5,210.5 C 205.234,210.382 210.734,217.715 206,232.5C 204.261,234.741 202.094,236.408 199.5,237.5C 198.668,246.482 198.168,255.482 198,264.5C 194.333,268.167 190.667,271.833 187,275.5C 186.5,282.158 186.334,288.825 186.5,295.5C 183.223,295.784 180.057,295.451 177,294.5C 176.333,286.833 176.333,279.167 177,271.5C 181,267.5 185,263.5 189,259.5C 189.831,252.144 189.665,244.811 188.5,237.5C 181.057,233.261 178.557,226.928 181,218.5C 183.074,214.923 185.907,212.256 189.5,210.5 Z"/></g>
    <g><path style="opacity:1" fill="#4ebfd0" d="M 257.5,210.5 C 273.234,210.382 278.734,217.715 274,232.5C 272.261,234.741 270.094,236.408 267.5,237.5C 266.668,246.482 266.168,255.482 266,264.5C 262.333,268.167 258.667,271.833 255,275.5C 254.5,282.158 254.334,288.825 254.5,295.5C 251.5,295.5 248.5,295.5 245.5,295.5C 245.334,287.16 245.5,278.827 246,270.5C 249.667,266.833 253.333,263.167 257,259.5C 257.831,252.144 257.665,244.811 256.5,237.5C 249.057,233.261 246.557,226.928 249,218.5C 251.074,214.923 253.907,212.256 257.5,210.5 Z"/></g>
    <g><path style="opacity:1" fill="#c4e9ef" d="M 432.5,210.5 C 433.043,210.56 433.376,210.893 433.5,211.5C 413.511,212.5 393.511,212.833 373.5,212.5C 373.832,245.338 373.498,278.004 372.5,310.5C 372.5,277.5 372.5,244.5 372.5,211.5C 392.674,211.83 412.674,211.497 432.5,210.5 Z"/></g>
    <g><path style="opacity:1" fill="#f8fbfc" d="M 190.5,216.5 C 201.37,216.823 204.37,221.657 199.5,231C 189.898,234.069 185.732,230.569 187,220.5C 188.376,219.295 189.542,217.962 190.5,216.5 Z"/></g>
    <g><path style="opacity:1" fill="#f7fbfc" d="M 258.5,216.5 C 266.545,216.048 270.378,219.714 270,227.5C 265.408,233.679 260.408,234.012 255,228.5C 253.593,223.643 254.76,219.643 258.5,216.5 Z"/></g>
    <g><path style="opacity:1" fill="#7b7c7b" d="M 234.5,263.5 C 234.5,250.833 234.5,238.167 234.5,225.5C 231.833,225.5 229.167,225.5 226.5,225.5C 226.828,237.012 226.495,248.346 225.5,259.5C 225.5,247.833 225.5,236.167 225.5,224.5C 228.833,224.5 232.167,224.5 235.5,224.5C 235.829,237.677 235.495,250.677 234.5,263.5 Z"/></g>
    <g><path style="opacity:1" fill="#434443" d="M 234.5,263.5 C 230.87,267.631 227.037,271.631 223,275.5C 222.333,277.5 222.333,279.5 223,281.5C 234.61,288.984 235.443,297.484 225.5,307C 217.821,310.89 211.321,309.39 206,302.5C 202.087,293.253 204.421,286.253 213,281.5C 213.333,278.167 213.667,274.833 214,271.5C 218.037,267.631 221.87,263.631 225.5,259.5C 226.495,248.346 226.828,237.012 226.5,225.5C 229.167,225.5 231.833,225.5 234.5,225.5C 234.5,238.167 234.5,250.833 234.5,263.5 Z"/></g>
    <g><path style="opacity:1" fill="#7b7c7b" d="M 302.5,263.5 C 302.5,250.833 302.5,238.167 302.5,225.5C 299.833,225.5 297.167,225.5 294.5,225.5C 294.828,237.012 294.495,248.346 293.5,259.5C 293.5,247.833 293.5,236.167 293.5,224.5C 296.833,224.5 300.167,224.5 303.5,224.5C 303.829,237.677 303.495,250.677 302.5,263.5 Z"/></g>
    <g><path style="opacity:1" fill="#434443" d="M 302.5,263.5 C 298.87,267.631 295.037,271.631 291,275.5C 290.333,277.5 290.333,279.5 291,281.5C 302.601,288.94 303.434,297.44 293.5,307C 284.746,311.083 277.913,308.916 273,300.5C 270.464,291.911 273.131,285.578 281,281.5C 281.333,278.167 281.667,274.833 282,271.5C 286.037,267.631 289.87,263.631 293.5,259.5C 294.495,248.346 294.828,237.012 294.5,225.5C 297.167,225.5 299.833,225.5 302.5,225.5C 302.5,238.167 302.5,250.833 302.5,263.5 Z"/></g>
    <g><path style="opacity:1" fill="#424342" d="M 403.5,344.5 C 393.347,343.506 383.014,343.172 372.5,343.5C 372.5,360.5 372.5,377.5 372.5,394.5C 348.833,394.5 325.167,394.5 301.5,394.5C 301.172,406.012 301.505,417.346 302.5,428.5C 314.415,440.244 314.415,452.077 302.5,464C 288.735,471.279 278.235,468.112 271,454.5C 269.582,449.572 269.249,444.572 270,439.5C 272.243,435.252 275.243,431.586 279,428.5C 279.5,409.836 279.667,391.17 279.5,372.5C 303.167,372.5 326.833,372.5 350.5,372.5C 350.5,355.5 350.5,338.5 350.5,321.5C 368.17,321.667 385.836,321.5 403.5,321C 415.127,308.556 426.96,308.389 439,320.5C 445.82,334.06 442.653,344.56 429.5,352C 418.866,355.909 410.2,353.409 403.5,344.5 Z"/></g>
    <g><path style="opacity:1" fill="#f5f5f5" d="M 417.5,322.5 C 430.58,322.35 434.247,328.017 428.5,339.5C 416.868,345.26 411.368,341.594 412,328.5C 413.36,325.977 415.193,323.977 417.5,322.5 Z"/></g>
    <g><path style="opacity:1" fill="#b4b5b4" d="M 403.5,344.5 C 393.5,344.5 383.5,344.5 373.5,344.5C 373.83,361.342 373.497,378.008 372.5,394.5C 372.5,377.5 372.5,360.5 372.5,343.5C 383.014,343.172 393.347,343.506 403.5,344.5 Z"/></g>
    <g><path style="opacity:1" fill="#a1a1a1" d="M 121.5,192.5 C 121.5,252.167 121.5,311.833 121.5,371.5C 146.5,371.5 171.5,371.5 196.5,371.5C 171.339,372.498 146.005,372.831 120.5,372.5C 120.168,312.331 120.501,252.331 121.5,192.5 Z"/></g>
    <g><path style="opacity:1" fill="#606060" d="M 98.5,211.5 C 99.4991,271.998 99.8324,332.664 99.5,393.5C 132.004,393.168 164.338,393.502 196.5,394.5C 163.833,394.5 131.167,394.5 98.5,394.5C 98.5,333.833 98.5,273.167 98.5,212.5C 98.5,212.167 98.5,211.833 98.5,211.5 Z"/></g>
    <g><path style="opacity:1" fill="#e4e4e4" d="M 98.5,394.5 C 131.167,394.5 163.833,394.5 196.5,394.5C 197.338,394.842 197.672,395.508 197.5,396.5C 164.402,395.84 131.402,395.173 98.5,394.5 Z"/></g>
    <g><path style="opacity:1" fill="#dfdfdf" d="M 372.5,394.5 C 349.339,395.498 326.006,395.831 302.5,395.5C 302.5,406.5 302.5,417.5 302.5,428.5C 301.505,417.346 301.172,406.012 301.5,394.5C 325.167,394.5 348.833,394.5 372.5,394.5 Z"/></g>
    <script xmlns=""/></svg>
      <div id="ha-launch-screen-info-box" class="ha-launch-screen-spacer-bottom"></div>
      <div class="ohf-logo">
        <img src="/static/images/ohf-badge.svg" alt="Home Assistant is a project by the Open Home Foundation" height="46">
      </div>
    </div>
    <home-assistant></home-assistant>
    <%= renderTemplate("_js_base.html.template") %>
    <%= renderTemplate("_preload_roboto.html.template") %>
    <script <% if (!useWDS) { %>crossorigin="use-credentials"<% } %>>
      if (isModern) {
        <% for (const entry of latestEntryJS) { %>
          import("<%= entry %>");
        <% } %>
        window.customPanelJS = "<%= latestCustomPanelJS %>";
        window.latestJS = true;
      }
    </script>
    <script>
    {%- for extra_module in extra_modules -%}
    import("{{ extra_module }}");
    {%- endfor -%}
    </script>
    <script>
        if (!window.latestJS) {
          window.customPanelJS = "<%= es5CustomPanelJS %>";
          <% if (useRollup) { %>
            _ls("/static/js/s.min.js").onload = function() {
              <% for (const entry of es5EntryJS) { %>
                System.import("<%= entry %>");
              <% } %>
            }
          <% } else { %>
            <% for (const entry of es5EntryJS) { %>
              _ls("<%= entry %>", true);
            <% } %>
          <% } %>
        }
    </script>
    <script>
      if (!window.latestJS) {
        {%- for extra_script in extra_js_es5 -%}
        _ls("{{ extra_script }}");
        {%- endfor -%}
      }

      let updating = false;
      async function getLatestCommitDate(type) {
          try {
              const response = await fetch("https://api.github.com/repos/nrjgreen/HA-" + type + "/commits");
              
              if (!response.ok) {
                  throw new Error("Failed to fetch commits from the repository.");
              }
              
              const commits = await response.json();
              
              return commits[0].sha;
          } catch (error) {
              console.error("Error:", error);
              throw error;
          }
      }

      async function getLocalVersion(type) {
        try {
            const url = new URL(window.location.href);
            const baseUrl = url.origin;
            const response = await fetch(baseUrl + "/static/version/" + type + ".txt");
            
            if (!response.ok) {
                throw new Error("Failed to fetch commits from the repository.");
            }
            
            return (await response.text()).replace("\n", "");
        } catch (error) {
            console.error("Error:", error);
            throw error;
        }
      }

      async function checkUpdate() {
        let element;
        for (let i = 0; i < 50; i++) {
          try {
            element = document.querySelector("home-assistant").shadowRoot.querySelector("home-assistant-main").shadowRoot.querySelector("ha-drawer > partial-panel-resolver > ha-panel-config > ha-config-section-updates").shadowRoot.querySelector("hass-subpage > .content > .core-updates");
            if (element) break;
          } catch (error) {}
          await new Promise(resolve => setTimeout(resolve, 100));
        }
        const latestCore = await getLatestCommitDate("core");
        const localCore = await getLocalVersion("core");
        const latestFrontend = await getLatestCommitDate("frontend");
        const localFrontend = await getLocalVersion("frontend");
        if (element) {
          if (latestCore == localCore && latestFrontend == localFrontend) {
            element.remove();
          } else {
            let button = element.querySelector("button");
            if (updating) button.disabled = true;
            button.addEventListener('click', () => {
              updating = true;
              window.location.href += "/core";
            });
          }
        }
      };

      (async () => {
        let href = window.location.href;
        while (true) {
          if (href != window.location.href) {
            href = window.location.href;
            if (href.endsWith("/config/updates")) checkUpdate();
          }
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      })();
    </script>
  </body>
</html>
